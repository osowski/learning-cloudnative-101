{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js","webpack:///./src/pages/kubernetes/activities/labs/solutions/index.mdx"],"names":["PageHeader","title","tabs","className","cx","pageHeader","withTabs","length","id","text","EditLink","relativePagePath","repositoryProp","repository","site","siteMetadata","baseUrl","subDirectory","href","branch","row","link","PageTabs","render","this","props","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","selected","currentTabRegex","RegExp","replace","key","selectedItem","listItem","to","tabsContainer","list","React","Component","Default","pageContext","children","location","Title","frontmatter","titleType","theme","description","keywords","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","BackToTopBtn","_frontmatter","makeShortcode","name","console","warn","Accordion","AccordionItem","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-kubernetes-activities-labs-solutions-index-mdx-a76bca952e408efdd229.js","sourcesContent":["import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pageHeader, withTabs, text } from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, tabs = [] }) => (\n  <div className={cx(pageHeader, { [withTabs]: tabs.length })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  static propTypes = {\n    tabs: PropTypes.array,\n    slug: PropTypes.string,\n  };\n\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug\n      .split('/')\n      .filter(Boolean)\n      .slice(-1)[0];\n\n    const pageTabs = tabs.map(tab => {\n      const slugifiedTab = slugify(tab, { lower: true });\n      const selected = slugifiedTab === currentTab;\n      const currentTabRegex = new RegExp(`${currentTab}(?!-)`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport BackToTopBtn from '../components/BackToTopBtn';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const { tabs, title, theme, description, keywords } = frontmatter;\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return slug.split('/').slice(-1)[0] || slugify(tabs[0], { lower: true });\n  };\n\n  const currentTab = getCurrentTab();\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}\n    >\n      <PageHeader title={Title ? <Title /> : title} label=\"label\" tabs={tabs} />\n      {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <BackToTopBtn />\n    </Layout>\n  );\n};\n\nexport default Default;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Accordion = makeShortcode(\"Accordion\");\nconst AccordionItem = makeShortcode(\"AccordionItem\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Solutions`}</h1>\n    <Accordion mdxType=\"Accordion\">\n      <AccordionItem title=\"Pod Creation\" mdxType=\"AccordionItem\">\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\n  namespace: web\nspec:\n  containers:\n    - name: nginx\n      image: nginx\n      command: [\"nginx\"]\n      args: [\"-g\", \"daemon off;\", \"-q\"]\n      ports:\n      - containerPort: 80\n`}</code></pre>\n      </AccordionItem>\n      <AccordionItem title=\"Pod Configuration\" mdxType=\"AccordionItem\">\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: yoda-service-config\ndata:\n  yoda.cfg: |-\n    yoda.baby.power=100000000\n    yoda.strength=10\n`}</code></pre>\n        <hr></hr>\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: v1\nkind: Secret\nmetadata:\n  name: yoda-db-password\nstringData:\n  password: 0penSh1ftRul3s!\n`}</code></pre>\n        <hr></hr>\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: v1\nkind: Pod\nmetadata:\n  name: yoda-service\nspec:\n  serviceAccountName: yoda-svc\n  containers:\n  - name: yoda-service\n    image: bitnami/nginx\n    volumeMounts:\n    - name: config-volume\n      mountPath: /etc/yoda-service\n    env:\n    - name: DB_PASSWORD\n      valueFrom:\n        secretKeyRef:\n          name: yoda-db-password\n          key: password\n    resources:\n      requests:\n        memory: \"64Mi\"\n        cpu: \"250m\"\n      limits:\n        memory: \"128Mi\"\n        cpu: \"500m\"\n  volumes:\n  - name: config-volume\n      configMap:\n        name: yoda-service-config\n`}</code></pre>\n      </AccordionItem>\n      <AccordionItem title=\"Multiple Containers\" mdxType=\"AccordionItem\">\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: vader-service-ambassador-config\ndata:\n  haproxy.cfg: |-\n    global\n        daemon\n        maxconn 256\n\n    defaults\n        mode http\n        timeout connect 5000ms\n        timeout client 50000ms\n        timeout server 50000ms\n\n    listen http-in\n        bind *:80\n        server server1 127.0.0.1:8989 maxconn 32\n`}</code></pre>\n        <hr></hr>\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: v1\nkind: Pod\nmetadata:\n  name: vader-service\nspec:\n  containers:\n    - name: millennium-falcon\n      image: ibmcase/millennium-falcon:1\n    - name: haproxy-ambassador\n      image: haproxy:1.7\n      ports:\n      - containerPort: 80\n      volumeMounts:\n      - name: config-volume\n        mountPath: /usr/local/etc/haproxy\n  volumes:\n  - name: config-volume\n    configMap:\n      name: vader-service-ambassador-config\n`}</code></pre>\n        <hr></hr>\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: v1\nkind: Pod\nmetadata:\nname: busybox\nspec:\ncontainers:\n- name: myapp-container\n    image: radial/busyboxplus:curl\n    command: ['sh', '-c', 'while true; do sleep 3600; done']\n`}</code></pre>\n        <p>{`   Check it with`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl exec busybox -- curl $(kubectl get pod vader-service -o=jsonpath='{.status.podIP}'):80\n`}</code></pre>\n      </AccordionItem>\n      <AccordionItem title=\"Probes\" mdxType=\"AccordionItem\">\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: v1\nkind: Pod\nmetadata:\n  name: energy-shield-service\nspec:\n  containers:\n  - name: energy-shield\n    image: ibmcase/energy-shield:1\n    livenessProbe:\n      httpGet:\n        path: /healthz\n        port: 8080\n    readinessProbe:\n      httpGet:\n        path: /ready\n        port: 8080\n      initialDelaySeconds: 5\n`}</code></pre>\n      </AccordionItem>\n      <AccordionItem title=\"Debugging\" mdxType=\"AccordionItem\">\n        <p>{`   Check `}<inlineCode parentName=\"p\">{`STATUS`}</inlineCode>{` column for not Ready`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl get pods --all-namespaces\n`}</code></pre>\n        <p>{`   Check the description of the deployment`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl describe deployment hyper-drive\n`}</code></pre>\n        <p>{`   Save logs for broken pod`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl logs <pod name> -n <namespace> > /home/cloud_user/debug/broken-pod-logs.log\n`}</code></pre>\n        <p>{`   In the deployment’s description you will see the following is wrong:`}</p>\n   <ul>\n      <li>Selector and Label names do not match.</li>\n      <li>The Probe is TCP instead of HTTP Get.</li>\n      <li>The Service Port is 80 instead of 8080.</li>\n   </ul>\n   To fix probe, can't kubectl edit, need to delete and recreate the deployment\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl get deployment <deployment name> -n <namespace> -o yaml --export > hyper-drive.yml\n`}</code></pre>\n        <p>{`   Delete pod`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl delete deployment <deployment name> -n <namespace>\n`}</code></pre>\n        <p>{`   Edit yaml, and apply`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl apply -f hyper-drive.yml -n <namespace>\n`}</code></pre>\n        <p>{`   Verify`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl get deployment <deployment name> -n <namespace>\n`}</code></pre>\n      </AccordionItem>\n      <AccordionItem title=\"Rolling Updates\" mdxType=\"AccordionItem\">\n        <p>{`  Update the deployment to the new version like so:`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl set image deployment/jedi-deployment jedi-ws=bitnamy/nginx:1.18.1 --record\n`}</code></pre>\n        <p>{`  Check the progress of the rolling update:`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl rollout status deployment/jedi-deployment\n`}</code></pre>\n        <p>{`  In another terminal window`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl get pods -w\n`}</code></pre>\n        <p>{`  Get a list of previous revisions.`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl rollout history deployment/jedi-deployment\n`}</code></pre>\n        <p>{`  Undo the last revision.`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl rollout undo deployment/jedi-deployment\n`}</code></pre>\n        <p>{`  Check the status of the rollout.`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl rollout status deployment/jedi-deployment\n`}</code></pre>\n      </AccordionItem>\n      <AccordionItem title=\"Cron Jobs\" mdxType=\"AccordionItem\">\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n  name: xwing-cronjob\nspec:\n  schedule: \"*/1 * * * *\"\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n          - name: xwing-status\n            image: ibmcase/xwing-status:1.0\n            args:\n            - /usr/sbin/xwing-status.sh\n          restartPolicy: OnFailure\n`}</code></pre>\n        <hr></hr>\n        <pre><code parentName=\"pre\" {...{}}>{`kubectl get cronjob xwing-cronjob\n`}</code></pre>\n      </AccordionItem>\n      <AccordionItem title=\"Services\" mdxType=\"AccordionItem\">\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: v1\nkind: Service\nmetadata:\n    name: jedi-svc\nspec:\n    type: NodePort\n    selector:\n        app: jedi\n    ports:\n    - protocol: TCP\n        port: 80\n        targetPort: 8080\n`}</code></pre>\n        <hr></hr>\n        <pre><code parentName=\"pre\" {...{}}>{`apiVersion: v1\nkind: Service\nmetadata:\nname: yoda-svc\nspec:\ntype: ClusterIP\nselector:\n    app: yoda\nports:\n- protocol: TCP\n    port: 80\n    targetPort: 8080\n`}</code></pre>\n      </AccordionItem>\n      <AccordionItem title=\"Persistent Volumes\" mdxType=\"AccordionItem\">\n        <pre><code parentName=\"pre\" {...{}}>{`    apiVersion: v1\n    kind: PersistentVolume\n    metadata:\n      name: postgresql-pv\n    spec:\n      storageClassName: localdisk\n      capacity:\n        storage: 1Gi\n      accessModes:\n        - ReadWriteOnce\n      hostPath:\n        path: \"/mnt/data\"\n`}</code></pre>\n        <hr></hr>\n        <pre><code parentName=\"pre\" {...{}}>{`    apiVersion: v1\n    kind: PersistentVolumeClaim\n    metadata:\n      name: postgresql-pv-claim\n    spec:\n      storageClassName: localdisk\n      accessModes:\n        - ReadWriteOnce\n      resources:\n        requests:\n          storage: 500Mi\n    \n`}</code></pre>\n        <hr></hr>\n        <pre><code parentName=\"pre\" {...{}}>{`    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: postgresql-pod\n    spec:\n      containers:\n      - name: postgresql\n        image: bitnami/postgresql\n        ports:\n        - containerPort: 5432\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          value: password\n        volumeMounts:\n        - name: sql-storage\n          mountPath: /bitnami/postgresql/\n      volumes:\n      - name: sql-storage\n        persistentVolumeClaim:\n          claimName: postgresql-pv-claim\n    \n`}</code></pre>\n        <hr></hr>\n      </AccordionItem>\n    </Accordion>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}